import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
import plotly.express as px
from sklearn.cluster import KMeans

# Configuration de la page
st.set_page_config(page_title="Analyse et Pr√©dictions des Crafts", layout="wide")

# Fonction pour charger et pr√©traiter les donn√©es
@st.cache_data
def load_data():
  df = pd.read_csv("craft.csv")
  df = df.replace('nan', np.nan)
  df['cost'] = pd.to_numeric(df['cost'], errors='coerce')
  return df

# Fonction pour encoder les caract√©ristiques cat√©gorielles
def encode_features(df):
  le = LabelEncoder()
  df_encoded = df.copy()
  categorical_columns = ['baseItem', 'mat1', 'mat2', 'mat3']
  
  for col in categorical_columns:
      if col in df.columns:
          df_encoded[col + '_encoded'] = le.fit_transform(df[col].fillna('missing'))
  
  return df_encoded

# Fonction pour entra√Æner le mod√®le pr√©dictif
@st.cache_resource
def train_cost_predictor(df):
  df_encoded = encode_features(df)
  features = ['category', 'tier', 'nMats', 'baseItem_encoded', 'mat1_encoded']
  
  X = df_encoded[features].fillna(-1)
  y = df_encoded['cost'].fillna(df_encoded['cost'].mean())
  
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
  
  model = RandomForestRegressor(n_estimators=100, random_state=42)  
  model.fit(X_train, y_train)
  
  return model, features

# Chargement des donn√©es
try:
  df = load_data()
  
  # Interface utilisateur
  st.title("üîÆ Analyse et Pr√©dictions des Crafts")
  
  # Onglets pour diff√©rentes sections
  tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä Exploration des donn√©es", "ü§ñ Pr√©dictions", "üîç Analyse avanc√©e", "üìà Tendances", "üìö Guide d'utilisation"])
  
  with tab1:
      st.header("Exploration des donn√©es")
      st.write("Visualisez et filtrez les donn√©es de crafting.")
      
      # Champ de recherche par nom
      search_term = st.text_input("Rechercher par nom d'item")
      
      # Filtres pour l'exploration des donn√©es
      category_filter = st.multiselect("S√©lectionnez une cat√©gorie", options=df['category'].unique())
      tier_filter = st.multiselect("S√©lectionnez un tier", options=df['tier'].unique())
      
      # Application des filtres
      filtered_df = df.copy()
      
      if search_term:
          filtered_df = filtered_df[filtered_df['baseItem'].str.contains(search_term, case=False, na=False)]
      
      if category_filter:
          filtered_df = filtered_df[filtered_df['category'].isin(category_filter)]
      
      if tier_filter:
          filtered_df = filtered_df[filtered_df['tier'].isin(tier_filter)]
      
      # Affichage du tableau de donn√©es filtr√©
      st.dataframe(filtered_df)

  with tab2:
      st.header("Pr√©dictions de co√ªt")
      st.write("Pr√©disez le co√ªt d'un craft en fonction de ses caract√©ristiques.")
      
      # Entra√Ænement du mod√®le
      model, features = train_cost_predictor(df)
      
      # Interface de pr√©diction
      pred_category = st.selectbox("Cat√©gorie", sorted(df['category'].unique()))
      pred_tier = st.selectbox("Tier", sorted(df['tier'].unique()))
      pred_nmats = st.number_input("Nombre de mat√©riaux", min_value=1, max_value=10)
      
      # Faire une pr√©diction
      if st.button("Pr√©dire le co√ªt"):
          df_encoded = encode_features(df)
          sample = pd.DataFrame({
              'category': [pred_category],
              'tier': [pred_tier],
              'nMats': [pred_nmats],
              'baseItem_encoded': [0],
              'mat1_encoded': [0]
          })
          
          prediction = model.predict(sample)[0]
          st.success(f"Co√ªt pr√©dit: {prediction:.2f}")
          
          # Importance des caract√©ristiques
          feature_importance = pd.DataFrame({
              'Feature': features,
              'Importance': model.feature_importances_
          }).sort_values('Importance', ascending=False)
          
          st.write("Importance des caract√©ristiques dans la pr√©diction:")
          fig_importance = px.bar(feature_importance, x='Feature', y='Importance')
          st.plotly_chart(fig_importance)

  with tab3:
      st.header("Analyse avanc√©e")
      st.write("Analysez les donn√©es de mani√®re plus approfondie.")
      
      # Clustering des items
      X_cluster = df[['cost', 'nMats']].fillna(df[['cost', 'nMats']].mean())
      kmeans = KMeans(n_clusters=3, random_state=42)
      df['cluster'] = kmeans.fit_predict(X_cluster)
      
      # Visualisation des clusters avec explication d√©taill√©e
      st.subheader("Clustering des items par co√ªt et mat√©riaux")
      st.markdown("""
      **Comment lire ce graphique:**
      - Chaque point repr√©sente un item diff√©rent
      - Axe horizontal (x) : Co√ªt de l'item
      - Axe vertical (y) : Nombre de mat√©riaux n√©cessaires
      - Les couleurs regroupent les items ayant des caract√©ristiques similaires
      
      **Ce que cela signifie:**
      - Les points proches = items similaires en termes de co√ªt et mat√©riaux
      - Groupes distincts = diff√©rentes cat√©gories de complexit√©/co√ªt
      - Utile pour identifier les items exceptionnels ou standards
      """)
      fig_cluster = px.scatter(df, x='cost', y='nMats', color='cluster', 
                             title="Clustering des items par co√ªt et mat√©riaux")
      st.plotly_chart(fig_cluster)
      
      # Analyse des co√ªts avec explication d√©taill√©e
      st.subheader("Analyse des co√ªts par nombre de mat√©riaux")
      st.markdown("""
      **Comment lire ce graphique:**
      - Axe horizontal (x) : Nombre de mat√©riaux requis
      - Axe vertical (y) : Co√ªt moyen en pi√®ces d'or
      - Chaque barre repr√©sente un niveau de complexit√© diff√©rent
      
      **Ce que cela signifie:**
      - Plus la barre est haute, plus les items sont co√ªteux
      - Permet de voir si plus de mat√©riaux = co√ªt plus √©lev√©
      - Aide √† estimer le co√ªt selon la complexit√© de fabrication
      """)
      cost_by_nmats = df.groupby('nMats')['cost'].mean().reset_index()
      fig_cost_by_nmats = px.bar(cost_by_nmats, x='nMats', y='cost', 
                                title="Co√ªt moyen par nombre de mat√©riaux")
      st.plotly_chart(fig_cost_by_nmats)

  with tab4:
      st.header("Analyse des tendances")
      st.write("D√©couvrez les tendances dans les donn√©es de crafting.")
      
      # √âvolution du co√ªt par tier avec explication d√©taill√©e
      st.subheader("√âvolution du co√ªt moyen par tier")
      st.markdown("""
      **Comment lire ce graphique:**
      - Axe horizontal (x) : Niveaux de tier (qualit√©)
      - Axe vertical (y) : Co√ªt moyen en pi√®ces d'or
      - La ligne montre l'√©volution des co√ªts entre les tiers
      
      **Ce que cela signifie:**
      - Pente montante = les tiers sup√©rieurs co√ªtent plus cher
      - Plateaux = zones o√π les co√ªts sont stables
      - Aide √† pr√©voir les co√ªts selon le tier vis√©
      """)
      cost_trend = df.groupby('tier')['cost'].mean().reset_index()
      fig_trend = px.line(cost_trend, x='tier', y='cost', 
                         title="√âvolution du co√ªt moyen par tier")
      st.plotly_chart(fig_trend)
      
      # Distribution des co√ªts avec explication d√©taill√©e
      st.subheader("Distribution des co√ªts")
      st.markdown("""
      **Comment lire ce graphique:**
      - Axe horizontal (x) : Plages de co√ªt
      - Axe vertical (y) : Nombre d'items dans chaque plage
      - Les pics montrent les co√ªts les plus fr√©quents
      
      **Ce que cela signifie:**
      - Pics √©lev√©s = co√ªts tr√®s communs
      - Distribution √©tal√©e = grande vari√©t√© de co√ªts
      - Aide √† identifier les gammes de prix normales
      """)
      fig_cost_distribution = px.histogram(df, x='cost', nbins=50, 
                                         title="Distribution des co√ªts")
      st.plotly_chart(fig_cost_distribution)
      
      # Complexit√© par cat√©gorie avec explication d√©taill√©e
      st.subheader("Complexit√© par cat√©gorie")
      st.markdown("""
      **Comment lire ce graphique:**
      - Axe horizontal (x) : Cat√©gories d'items
      - Axe vertical (y) : Nombre moyen de mat√©riaux
      - Chaque barre repr√©sente une cat√©gorie diff√©rente
      
      **Ce que cela signifie:**
      - Barres hautes = cat√©gories complexes √† fabriquer
      - Barres basses = cat√©gories simples
      - Aide √† choisir des projets selon leur complexit√©
      """)
      complexity_analysis = df.groupby('category')['nMats'].mean().reset_index()
      fig_complexity = px.bar(complexity_analysis, x='category', y='nMats', 
                            title="Complexit√© moyenne par cat√©gorie")
      st.plotly_chart(fig_complexity)

  with tab5:
      st.title("üìö Guide d'utilisation du Dashboard")
      
      st.markdown("""
      ### üéØ Objectif du Dashboard
      Ce dashboard vous permet d'analyser en d√©tail les items de crafting. Il est con√ßu pour √™tre accessible √† tous, que vous soyez d√©butant ou expert.
      
      ### üìä Exploration des donn√©es
      - **Fonctionnalit√©** : Permet de filtrer et de visualiser les donn√©es de crafting.
      - **Utilisation** : Recherchez par nom d'item et appliquez des filtres par cat√©gorie et tier pour explorer les donn√©es sp√©cifiques.
      
      ### üîÆ Pr√©dictions
      - **Fonctionnalit√©** : Utilise un mod√®le de r√©gression Random Forest pour pr√©dire le co√ªt d'un item.
      - **Utilisation** : S√©lectionnez la cat√©gorie, le tier, et le nombre de mat√©riaux pour obtenir une estimation du co√ªt.
      - **Graphique d'importance** : Montre quels facteurs influencent le plus le co√ªt.
      
      ### üîç Analyse Avanc√©e
      - **Fonctionnalit√©** : Comprend des analyses comme le clustering des items par co√ªt et nombre de mat√©riaux.
      - **Utilisation** : Identifiez des groupes d'items similaires pour comprendre les patterns dans les donn√©es.
      
      ### üìà Analyse des Tendances
      - **Fonctionnalit√©** : Visualise les tendances des co√ªts moyens par tier et la distribution des co√ªts.
      - **Utilisation** : Comprenez comment les co√ªts √©voluent avec le tier et explorez la r√©partition des co√ªts.
      
      ### üí° Conseils d'utilisation
      - Commencez par l'Exploration des donn√©es pour avoir une id√©e g√©n√©rale.
      - Utilisez les Pr√©dictions pour estimer le co√ªt de nouvelles combinaisons.
      - Explorez l'Analyse Avanc√©e pour d√©couvrir des patterns int√©ressants.
      - Utilisez les filtres dans l'Exploration des donn√©es pour des recherches sp√©cifiques.
      """)
      
      # Section FAQ
      st.subheader("‚ùì Questions Fr√©quentes")
      
      with st.expander("Comment interpr√©ter le graphique de clustering ?"):
          st.write("Le clustering regroupe les items similaires. Chaque couleur repr√©sente un groupe diff√©rent d'items ayant des caract√©ristiques similaires en termes de co√ªt et de mat√©riaux.")
      
      with st.expander("Comment sont calcul√©es les pr√©dictions ?"):
          st.write("Les pr√©dictions utilisent un mod√®le de Random Forest qui apprend √† partir des donn√©es existantes. Il prend en compte la cat√©gorie, le tier, et le nombre de mat√©riaux pour estimer le co√ªt probable d'un item.")

except Exception as e:
  st.error(f"Erreur lors de l'analyse: {str(e)}")
  st.info("V√©rifiez que le fichier 'craft.csv' est pr√©sent et correctement format√©.")